<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="pipelining__dma__tiled__loops_8md" kind="file" language="Markdown">
    <compoundname>pipelining_dma_tiled_loops.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Pipelining<sp/>DMA<sp/>Tiled<sp/>Loops</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>CONTENTS:<sp/>&lt;!--<sp/>omit<sp/>in<sp/>toc<sp/>--&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[Pipelining<sp/>DMA<sp/>Tiled<sp/>Loops](#pipelining-dma-tiled-loops)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>[Introduction](#introduction)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>[Maximizing<sp/>performance](#maximizing-performance)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>[Appendix:<sp/>full<sp/>pipeline<sp/>description](#appendix-full-pipeline-description)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Introduction</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>a<sp/>simple<sp/>example<sp/>suppose<sp/>a<sp/>single<sp/>input<sp/>image<sp/>is<sp/>imported,<sp/>operated<sp/>on,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">exported.<sp/>Tiling<sp/>produces<sp/>a<sp/>single<sp/>“outer”<sp/>loop<sp/>which<sp/>conceptually<sp/>processes<sp/>one</highlight></codeline>
<codeline><highlight class="normal">tile<sp/>per<sp/>iteration:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>0.<sp/>Non-pipelined<sp/>tiled<sp/>loop</highlight></codeline>
<codeline><highlight class="normal"><sp/>for<sp/>tile<sp/>in<sp/>[0,<sp/>number_of_tiles]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Import<sp/>tile</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>WaitImport<sp/>tile</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Compute<sp/>tile</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Export<sp/>tile</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>WaitExport<sp/>tile</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Software-Pipelining<sp/>a<sp/>tiled<sp/>loop<sp/>can<sp/>overlap<sp/>independent<sp/>operations<sp/>across</highlight></codeline>
<codeline><highlight class="normal">iterations<sp/>and<sp/>execute<sp/>them<sp/>concurrently,<sp/>similar<sp/>to<sp/>pipelining<sp/>the<sp/>instructions</highlight></codeline>
<codeline><highlight class="normal">of<sp/>innermost<sp/>loop(s)<sp/>producing<sp/>parallel<sp/>instruction<sp/>bundles<sp/>for<sp/>VLIW<sp/>targets</highlight></codeline>
<codeline><highlight class="normal">Modulo-Scheduling<sp/>is<sp/>an<sp/>automatic<sp/>pipelining<sp/>technique<sp/>which</highlight></codeline>
<codeline><highlight class="normal">maximizes<sp/>parallelism<sp/>and<sp/>throughput<sp/>by<sp/>minimizing<sp/>the<sp/>latency<sp/>of<sp/>the<sp/>steady</highlight></codeline>
<codeline><highlight class="normal">state,<sp/>aka<sp/>Initiation<sp/>Interval<sp/>(II),<sp/>and<sp/>then<sp/>applying<sp/>variable<sp/>expansion<sp/>as</highlight></codeline>
<codeline><highlight class="normal">needed<sp/>-<sp/>allocating<sp/>multiple<sp/>rotating<sp/>registers<sp/>to<sp/>values<sp/>whose<sp/>live-range</highlight></codeline>
<codeline><highlight class="normal">exceeds<sp/>II.<sp/>The<sp/>concurrency<sp/>in<sp/>DMA-Tiled<sp/>loops<sp/>stems<sp/>from<sp/>the<sp/>asynchronous<sp/>and</highlight></codeline>
<codeline><highlight class="normal">independent<sp/>nature<sp/>of<sp/>DMA<sp/>operations,<sp/>rather<sp/>than<sp/>the<sp/>Instruction-Level</highlight></codeline>
<codeline><highlight class="normal">Parallelism<sp/>of<sp/>VLIWs.<sp/>On<sp/>many<sp/>accelerators,<sp/>a<sp/>DMA<sp/>import<sp/>and/or<sp/>export<sp/>can<sp/>run</highlight></codeline>
<codeline><highlight class="normal">in<sp/>parallel<sp/>to<sp/>independent<sp/>non-DMA<sp/>SSC<sp/>operations.<sp/>Buffers<sp/>allocated<sp/>on<sp/>scratchpad</highlight></codeline>
<codeline><highlight class="normal">memory<sp/>whose<sp/>pipelined<sp/>live-ranges<sp/>self-intersect,<sp/>i.e.,<sp/>exceed<sp/>the<sp/>initiation</highlight></codeline>
<codeline><highlight class="normal">interval,<sp/>require<sp/>Array<sp/>Expansion<sp/>(across<sp/>distinct<sp/>memory<sp/>banks),<sp/>similar<sp/>to</highlight></codeline>
<codeline><highlight class="normal">allocating<sp/>multiple<sp/>rotating<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It<sp/>is<sp/>also<sp/>conceivable<sp/>to<sp/>combine<sp/>manual<sp/>Tiling<sp/>with<sp/>automated<sp/>Pipelining,<sp/>coupled</highlight></codeline>
<codeline><highlight class="normal">with<sp/>manual<sp/>or<sp/>automated<sp/>expansion.<sp/>One<sp/>such<sp/>combination<sp/>is<sp/>initially<sp/>outlined</highlight></codeline>
<codeline><highlight class="normal">below.<sp/>Automated<sp/>steps<sp/>could<sp/>be<sp/>assisted<sp/>by<sp/>user<sp/>directive,<sp/>as<sp/>in<sp/></highlight></codeline>
<codeline><highlight class="normal">\#pragma<sp/>disable_loop_pipelining<sp/>of<sp/>Intel<sp/>FPGA<sp/>SDK<sp/>for<sp/>OpenCL.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Maximizing<sp/>performance</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>above<sp/>chain<sp/>of<sp/>5<sp/>operations:<sp/>Import<sp/>--\&gt;<sp/>WaitImport<sp/>--\&gt;<sp/>Compute<sp/>--\&gt;<sp/>Export</highlight></codeline>
<codeline><highlight class="normal">--\&gt;<sp/>WaitExport<sp/>can<sp/>be<sp/>maximally<sp/>pipeline-parallelized<sp/>by<sp/>assigning</highlight></codeline>
<codeline><highlight class="normal">Import,<sp/>Export<sp/>and<sp/>Compute<sp/>to<sp/>three<sp/>distinct<sp/>pipeline<sp/>stages:<sp/>starting<sp/>to<sp/>import</highlight></codeline>
<codeline><highlight class="normal">the<sp/>next<sp/>tile<sp/>in<sp/>parallel<sp/>to<sp/>computing<sp/>the<sp/>current<sp/>tile,<sp/>and<sp/>in<sp/>parallel<sp/>to</highlight></codeline>
<codeline><highlight class="normal">exporting<sp/>the<sp/>previously<sp/>computed<sp/>tile</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Conceptual<sp/>3-stage<sp/>Pipeline<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>II<sp/>=<sp/>max<sp/>{|Import|,<sp/>|Export|,<sp/>|Compute|}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Iteration:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3+</highlight></codeline>
<codeline><highlight class="normal"><sp/>---------------+--------+--------+--------</highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>1:<sp/>Import1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>2:<sp/>Compute1<sp/>Import2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------<sp/>--------</highlight></codeline>
<codeline><highlight class="normal"><sp/>Steady<sp/>State:<sp/><sp/><sp/>Export1<sp/><sp/>Compute2<sp/>Import3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------<sp/>--------<sp/>--------</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export2<sp/><sp/>Compute3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------<sp/>--------</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export3</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>buffer<sp/>associated<sp/>with<sp/>Import<sp/>has<sp/>a<sp/>live-range<sp/>spanning<sp/>two<sp/>iterations:</highlight></codeline>
<codeline><highlight class="normal">starting<sp/>at<sp/>the<sp/>Import<sp/>operation<sp/>and<sp/>ending<sp/>when<sp/>the<sp/>associated<sp/>Compute<sp/>finishes</highlight></codeline>
<codeline><highlight class="normal">to<sp/>consume<sp/>the<sp/>buffer.<sp/>The<sp/>buffer<sp/>associated<sp/>with<sp/>Export<sp/>also<sp/>has<sp/>a<sp/>live-range</highlight></codeline>
<codeline><highlight class="normal">spanning<sp/>two<sp/>iterations:<sp/>starting<sp/>at<sp/>the<sp/>associated<sp/>Compute<sp/>operation<sp/>and<sp/>ending</highlight></codeline>
<codeline><highlight class="normal">when<sp/>Export<sp/>finishes.<sp/>Therefore,<sp/>each<sp/>requires<sp/>double-buffering.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q:<sp/>When<sp/>should<sp/>WaitImport<sp/>and<sp/>WaitExport<sp/>be<sp/>scheduled?<sp/>Their<sp/>latency<sp/>is<sp/>expected</highlight></codeline>
<codeline><highlight class="normal">to<sp/>be<sp/>negligible<sp/>compared<sp/>to<sp/>that<sp/>of<sp/>the<sp/>actual<sp/>Import<sp/>and<sp/>Export.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A:<sp/>In<sp/>general,<sp/>on<sp/>non-VLIW<sp/>targets<sp/>such<sp/>as<sp/>SSC,<sp/>operations<sp/>scheduled<sp/>to<sp/>run</highlight></codeline>
<codeline><highlight class="normal">together<sp/>in<sp/>parallel<sp/>bundles<sp/>need<sp/>to<sp/>be<sp/>ordered<sp/>in<sp/>order<sp/>to<sp/>achieve<sp/>the<sp/>desired</highlight></codeline>
<codeline><highlight class="normal">concurrency.<sp/>The<sp/>parallel<sp/>bundle<sp/>in<sp/>the<sp/>above<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>[Export-previous-tile<sp/>||<sp/>Computing-current-tile<sp/>||<sp/>Import-next-tile]</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">whose<sp/>operations<sp/>conceptually<sp/>overlap<sp/>by<sp/>starting<sp/>together<sp/>and<sp/>finishing</highlight></codeline>
<codeline><highlight class="normal">together,<sp/>should<sp/>be<sp/>ordered<sp/>such<sp/>that<sp/>Import<sp/>and<sp/>Export<sp/>are<sp/>issued<sp/>before</highlight></codeline>
<codeline><highlight class="normal">Compute,<sp/>which<sp/>in<sp/>turn<sp/>is<sp/>issued<sp/>before<sp/>WaitImport<sp/>and<sp/>WaitExport.<sp/>Doing<sp/>so</highlight></codeline>
<codeline><highlight class="normal">produces</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>1a.<sp/>“Earliest<sp/>Waits”<sp/>double<sp/>double-buffered<sp/>pipeline</highlight></codeline>
<codeline><highlight class="normal"><sp/>for<sp/>(tile)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Export<sp/>tile-1;<sp/>Import<sp/>tile+1;<sp/>Compute<sp/>tile;<sp/>WaitImport<sp/>tile+1;<sp/>WaitExport<sp/>tile-1</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">Q0:<sp/>Should<sp/>WaitImport<sp/>and/or<sp/>WaitExport<sp/>tile-1<sp/>be<sp/>scheduled<sp/>later?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A0:<sp/>Pipelining<sp/>optimizes<sp/>the<sp/>schedule<sp/>according<sp/>to<sp/>latency<sp/>estimates,<sp/>so</highlight></codeline>
<codeline><highlight class="normal">synchronizing<sp/>at<sp/>the<sp/>end<sp/>of<sp/>each<sp/>“line”<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>quick.<sp/>But<sp/>it<sp/>may<sp/>be</highlight></codeline>
<codeline><highlight class="normal">advantageous<sp/>to<sp/>tolerate<sp/>potential<sp/>delays<sp/>in<sp/>DMA<sp/>transactions<sp/>by<sp/>postponing</highlight></codeline>
<codeline><highlight class="normal">their<sp/>synchronizing<sp/>waits,<sp/>provided<sp/>resources<sp/>are<sp/>available<sp/>to<sp/>do<sp/>so<sp/>-<sp/>including</highlight></codeline>
<codeline><highlight class="normal">associated<sp/>scratchpad<sp/>buffer<sp/>(on<sp/>available<sp/>memory<sp/>bank)<sp/>and<sp/>DMA<sp/>channel.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Rotating<sp/>WaitImport<sp/>tile+1<sp/>and<sp/>WaitExport<sp/>tile-1<sp/>forward<sp/>from<sp/>being<sp/>the<sp/>last</highlight></codeline>
<codeline><highlight class="normal">operations<sp/>of<sp/>the<sp/>iteration,<sp/>to<sp/>being<sp/>the<sp/>first<sp/>operations<sp/>of<sp/>the<sp/>next</highlight></codeline>
<codeline><highlight class="normal">iteration,<sp/>produces<sp/>the<sp/>equivalent<sp/>pipeline<sp/>with<sp/>one<sp/>additional<sp/>stage<sp/>and</highlight></codeline>
<codeline><highlight class="normal">iteration:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>1b.<sp/>Rotated<sp/>“Earliest<sp/>Waits”<sp/>double<sp/>double-buffered<sp/>pipeline</highlight></codeline>
<codeline><highlight class="normal"><sp/>for<sp/>(tile)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>WaitImport<sp/>tile;<sp/>WaitExport<sp/>tile-2;<sp/>Export<sp/>tile-1;<sp/>Import<sp/>tile+1;<sp/>Compute<sp/>tile<sp/></highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Postponing<sp/>WaitImport<sp/>tile<sp/>to<sp/>appear<sp/>after<sp/>WaitExport,<sp/>Export,<sp/>and<sp/>right<sp/>before</highlight></codeline>
<codeline><highlight class="normal">Import<sp/>tile+1<sp/>produces</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>2.<sp/>“Wait<sp/>before<sp/>next<sp/>Import/Export”<sp/>pipeline</highlight></codeline>
<codeline><highlight class="normal"><sp/>for<sp/>(tile)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>WaitExport<sp/>tile-2;<sp/>Export<sp/>tile-1;<sp/>WaitImport<sp/>tile;<sp/>Import<sp/>tile+1;<sp/>Compute<sp/>tile<sp/></highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>the<sp/>pipeline<sp/>produced<sp/>by<sp/>dmaiterate,<sp/>and<sp/>should<sp/>be<sp/>used<sp/>when<sp/>analyzing</highlight></codeline>
<codeline><highlight class="normal">performance<sp/>comparison<sp/>between<sp/>dmaiterate<sp/>and<sp/>manual/TTL<sp/>tiling<sp/>(see<sp/>Appendix<sp/>A</highlight></codeline>
<codeline><highlight class="normal">in<sp/>“To<sp/>Tiler<sp/>Or<sp/>Not<sp/>To<sp/>Tiler”).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Postponing<sp/>WaitImport<sp/>and<sp/>WaitExport<sp/>further/furthest,<sp/>to<sp/>appear<sp/>before<sp/>the</highlight></codeline>
<codeline><highlight class="normal">dependent<sp/>Compute<sp/>produces</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>3.<sp/>“Latest<sp/>Waits”<sp/>pipeline</highlight></codeline>
<codeline><highlight class="normal"><sp/>for<sp/>(tile)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Export<sp/>tile-1;<sp/>Import<sp/>tile+1;<sp/>WaitImport<sp/>tile;<sp/>WaitExport<sp/>tile-2;<sp/>Compute<sp/>tile</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>full<sp/>pipeline<sp/>description<sp/>is<sp/>provided<sp/>in<sp/>an<sp/>Appendix<sp/>below.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q1:<sp/>If<sp/>WaitImport<sp/>tile<sp/>and<sp/>Import<sp/>tile+1,<sp/>are<sp/>scheduled<sp/>back-to-back,<sp/>who<sp/>should</highlight></codeline>
<codeline><highlight class="normal">go<sp/>first?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A1:<sp/>placing<sp/>WaitImport<sp/>tile<sp/>first<sp/>allows<sp/>both<sp/>to<sp/>reuse<sp/>the<sp/>same<sp/>channel.<sp/>If</highlight></codeline>
<codeline><highlight class="normal">WaitImport<sp/>tile<sp/>stalls<sp/>-<sp/>because<sp/>the<sp/>import<sp/>of<sp/>tile<sp/>is<sp/>yet<sp/>to<sp/>complete,<sp/>issuing</highlight></codeline>
<codeline><highlight class="normal">Import<sp/>tile+1<sp/>early<sp/>will<sp/>not<sp/>gain<sp/>much<sp/>(if<sp/>anything?)<sp/>given<sp/>that<sp/>all<sp/>imports<sp/>are</highlight></codeline>
<codeline><highlight class="normal">DMA’d<sp/>in-order<sp/>on<sp/>any<sp/>device.<sp/>Same<sp/>goes<sp/>for<sp/>scheduling<sp/>WaitExport<sp/>tile-2<sp/>relative</highlight></codeline>
<codeline><highlight class="normal">to<sp/>Export<sp/>tile-1.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q2:<sp/>Should<sp/>WaitImport<sp/>tile<sp/>be<sp/>scheduled<sp/>after<sp/>Export<sp/>tile-1,<sp/>or<sp/>before<sp/>it?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A2:<sp/>When<sp/>hardware<sp/>allows<sp/>it<sp/>may<sp/>be<sp/>advantageous<sp/>to<sp/>schedule<sp/>Export<sp/>tile-1<sp/>first</highlight></codeline>
<codeline><highlight class="normal">before<sp/>WaitImport<sp/>tile<sp/>which<sp/>may<sp/>stall,<sp/>if<sp/>there<sp/>are<sp/>available<sp/>channels.<sp/>Same</highlight></codeline>
<codeline><highlight class="normal">goes<sp/>for<sp/>scheduling<sp/>WaitExport<sp/>tile-2<sp/>relative<sp/>to<sp/>Import<sp/>tile+1.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q3:<sp/>Should<sp/>WaitImport<sp/>tile<sp/>and<sp/>WaitExport<sp/>tile-2<sp/>be<sp/>combined<sp/>into<sp/>a<sp/>single<sp/>wait</highlight></codeline>
<codeline><highlight class="normal">on<sp/>both<sp/>channels,<sp/>instead<sp/>of<sp/>two<sp/>separate<sp/>waits<sp/>scheduled<sp/>back<sp/>to<sp/>back?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A3:<sp/>probably<sp/>yes,<sp/>resulting<sp/>in<sp/>a<sp/>single<sp/>DMA/SSC<sp/>synchronization<sp/>point<sp/>instead<sp/>of</highlight></codeline>
<codeline><highlight class="normal">two(?)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q3.5:<sp/>How<sp/>should<sp/>the<sp/>above<sp/>example<sp/>be<sp/>pipelined,<sp/>if<sp/>fewer<sp/>than<sp/>four</highlight></codeline>
<codeline><highlight class="normal">buffers/banks<sp/>are<sp/>available?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A3.5:<sp/>With<sp/>fewer<sp/>than<sp/>four<sp/>buffers,<sp/>at<sp/>most<sp/>two<sp/>of<sp/>{Compute,<sp/>Import,<sp/>Export}<sp/>can</highlight></codeline>
<codeline><highlight class="normal">overlap,<sp/>implying<sp/>that<sp/>II<sp/>will<sp/>be<sp/>at-least<sp/>“2”.<sp/>At-least<sp/>two<sp/>distinct<sp/>buffers</highlight></codeline>
<codeline><highlight class="normal">are<sp/>required<sp/>by<sp/>Compute,<sp/>assuming<sp/>it<sp/>cannot<sp/>write<sp/>destructively<sp/>to<sp/>the<sp/>same</highlight></codeline>
<codeline><highlight class="normal">buffer<sp/>it<sp/>reads<sp/>from.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Overlapping<sp/>Import<sp/>with<sp/>Export<sp/>is<sp/>possible<sp/>and<sp/>requires<sp/>(only<sp/>the)<sp/>two<sp/>buffers:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Conceptual<sp/>2-stage<sp/>Pipeline<sp/>with<sp/>Duplex<sp/>DMA</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>W/o<sp/>any<sp/>double-buffering</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>II<sp/>=<sp/>|Compute|<sp/>+<sp/>max<sp/>{|Import|,<sp/>|Export|}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Iteration:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2+</highlight></codeline>
<codeline><highlight class="normal"><sp/>---------------+--------+--------+</highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>1:<sp/>Import1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline><highlight class="normal"><sp/>Steady<sp/>State:<sp/><sp/><sp/>Export1<sp/><sp/>Import2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------<sp/>--------</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export2</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>Import<sp/>is<sp/>not<sp/>overlapped<sp/>with<sp/>Export,<sp/>either<sp/>or<sp/>both<sp/>could<sp/>be<sp/>overlapped<sp/>with</highlight></codeline>
<codeline><highlight class="normal">Compute,<sp/>requiring<sp/>a<sp/>third<sp/>buffer<sp/>for<sp/>double<sp/>or<sp/>triple<sp/>buffering,<sp/>respectively.</highlight></codeline>
<codeline><highlight class="normal">Doing<sp/>so<sp/>also<sp/>addresses<sp/>the<sp/>following<sp/>related<sp/>question:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q4:<sp/>How<sp/>should<sp/>the<sp/>above<sp/>example<sp/>be<sp/>pipelined<sp/>when<sp/>duplex<sp/>DMA<sp/>is<sp/>not<sp/>possible</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A4:<sp/>There<sp/>are<sp/>several<sp/>pipelining<sp/>options,<sp/>depending<sp/>on<sp/>the<sp/>latency<sp/>of<sp/>Compute</highlight></codeline>
<codeline><highlight class="normal">relative<sp/>to<sp/>that<sp/>of<sp/>Import<sp/>and<sp/>Export</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A4.1:<sp/>Overlap<sp/>Compute<sp/>with<sp/>Import;<sp/>good<sp/>when<sp/>\|Compute\|<sp/>\&lt;=<sp/>\|Import\|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Conceptual<sp/>2-stage<sp/>Pipeline<sp/>with<sp/>Simplex<sp/>DMA</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>II<sp/>=<sp/>|Export|<sp/>+<sp/>max<sp/>{|Compute|,<sp/>|Import|}</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Import<sp/>is<sp/>double-buffered<sp/>but<sp/>Export<sp/>is<sp/>not</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Iteration:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2+</highlight></codeline>
<codeline><highlight class="normal"><sp/>---------------+--------+--------+</highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>1:<sp/>Import1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Steady<sp/>State:<sp/><sp/><sp/>Compute1<sp/>Import2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export1</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export2<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A4.2:<sp/>Overlap<sp/>Compute<sp/>with<sp/>Export;<sp/>good<sp/>when<sp/>\|Compute\|<sp/>\&lt;=<sp/>\|Export\|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Conceptual<sp/>2-stage<sp/>Pipeline<sp/>with<sp/>Simplex<sp/>DMA</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>II<sp/>=<sp/>|Import|<sp/>+<sp/>max<sp/>{|Compute|,<sp/>|Export|}</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Export<sp/>is<sp/>double-buffered<sp/>but<sp/>Import<sp/>is<sp/>not</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Iteration:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2+</highlight></codeline>
<codeline><highlight class="normal"><sp/>---------------+--------+--------+</highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>1:<sp/>Import1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute1</highlight></codeline>
<codeline><highlight class="normal"><sp/>Steady<sp/>State:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Import2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export1<sp/><sp/>Compute2</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export2<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q5:<sp/>If<sp/>\|Compute\|<sp/>\&lt;=<sp/>min<sp/>{\|Input\|,<sp/>\|Export\|},<sp/>which<sp/>of<sp/>A4.1<sp/>and<sp/>A4.2<sp/>is</highlight></codeline>
<codeline><highlight class="normal">better?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A5:<sp/>their<sp/>II’s<sp/>in<sp/>this<sp/>case<sp/>are<sp/>equal:<sp/>\|Input\|+\|Export\|;<sp/>double-buffering</highlight></codeline>
<codeline><highlight class="normal">the<sp/>smaller<sp/>buffer<sp/>(of<sp/>Import<sp/>and<sp/>Export)<sp/>would<sp/>save<sp/>scratchpad<sp/>memory<sp/>space.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A4.3:<sp/>Overlap<sp/>Compute<sp/>with<sp/>both<sp/>Import<sp/>and<sp/>Export;<sp/>good<sp/>also<sp/>when<sp/>\|Compute\|<sp/>\&gt;</highlight></codeline>
<codeline><highlight class="normal">max<sp/>{\|Import\|,<sp/>\|Export\|}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Conceptual<sp/>3-stage<sp/>Pipeline<sp/>with<sp/>Simplex<sp/>DMA</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>II<sp/>=<sp/>max<sp/>{|Compute|,<sp/>|Import|+|Export|}</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Import<sp/>and<sp/>Export<sp/>are<sp/>triple-buffered<sp/>together</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Iteration:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2+</highlight></codeline>
<codeline><highlight class="normal"><sp/>---------------+--------+--------+</highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Import1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>2:<sp/>Compute1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+<sp/>Live-range<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cont’d)<sp/>Import2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>exported<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/>Steady<sp/>State:<sp/><sp/><sp/>Export1<sp/><sp/>Compute2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cont’d)<sp/>Import3<sp/><sp/>-+<sp/>Live-range<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export2<sp/><sp/>Compute3<sp/><sp/>|<sp/>imported<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cont’d)<sp/>-+</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export3</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note:<sp/>A4.3<sp/>can<sp/>be<sp/>applied<sp/>instead<sp/>of<sp/>A4.1<sp/>and<sp/>A4.2<sp/>when<sp/>\|Compute\|<sp/>\&lt;=</highlight></codeline>
<codeline><highlight class="normal">\|Import\|<sp/>and<sp/>\|Compute\|<sp/>\&lt;=<sp/>\|Export\|,<sp/>respectively:<sp/>they<sp/>have<sp/>the<sp/>same<sp/>II</highlight></codeline>
<codeline><highlight class="normal">of<sp/>\|Input\|+\|Export\|.<sp/>The<sp/>triple-buffering<sp/>of<sp/>A4.3<sp/>requires<sp/>three<sp/>buffers<sp/>all</highlight></codeline>
<codeline><highlight class="normal">having<sp/>the<sp/>size<sp/>of<sp/>the<sp/>larger<sp/>buffer<sp/>(between<sp/>Import<sp/>and<sp/>Export),<sp/>whereas<sp/>A4.1</highlight></codeline>
<codeline><highlight class="normal">and<sp/>A4.2<sp/>require<sp/>smaller<sp/>scratchpad<sp/>memory<sp/>space<sp/>if<sp/>Import<sp/>and<sp/>Export<sp/>buffers</highlight></codeline>
<codeline><highlight class="normal">are<sp/>of<sp/>distinct<sp/>sizes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note:<sp/>triple-buffering<sp/>advocates<sp/>the<sp/>use<sp/>of<sp/>duplex<sp/>DMA<sp/>which<sp/>may<sp/>reduce<sp/>the</highlight></codeline>
<codeline><highlight class="normal">II<sp/>from<sp/>max<sp/>{\|Compute\|,<sp/>\|Input\|+\|Export\|}<sp/>potentially<sp/>close<sp/>to<sp/>max</highlight></codeline>
<codeline><highlight class="normal">{\|Compute\|,\|Input\|,\|Export\|}.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note:<sp/>if<sp/>Compute<sp/>can<sp/>be<sp/>partitioned,<sp/>the<sp/>loop<sp/>can<sp/>be<sp/>rotated<sp/>to<sp/>produce<sp/>a</highlight></codeline>
<codeline><highlight class="normal">2-staged<sp/>pipeline</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Conceptual<sp/>2-stage<sp/>Rotated<sp/>Pipeline<sp/>with<sp/>Simplex<sp/>DMA</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>II<sp/>=<sp/>max<sp/>{|Compute|,<sp/>|Import|+|Export|}</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Import<sp/>and<sp/>Export<sp/>are<sp/>triple-buffered<sp/>together</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>Iteration:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2+</highlight></codeline>
<codeline><highlight class="normal"><sp/>---------------+--------+--------+</highlight></codeline>
<codeline><highlight class="normal"><sp/>Prolog<sp/>Stage<sp/>1:<sp/>Import1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompuA1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>Steady<sp/>State:<sp/><sp/><sp/>CompuB1<sp/><sp/>Import2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export1<sp/><sp/>CompuA2</highlight></codeline>
<codeline><highlight class="normal"><sp/>Epilog<sp/>Stage<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompuB2<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export2</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Appendix:<sp/>full<sp/>pipeline<sp/>description</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Including<sp/>WaitImport<sp/>tile<sp/>and<sp/>WaitExport<sp/>in<sp/>the<sp/>pipeline,<sp/>having<sp/>a<sp/>single<sp/>column</highlight></codeline>
<codeline><highlight class="normal">for<sp/>single-issue<sp/>targets<sp/>such<sp/>as<sp/>SSC,<sp/>produces<sp/>the<sp/>following<sp/>for<sp/>the<sp/>above</highlight></codeline>
<codeline><highlight class="normal">example,<sp/>using<sp/>an<sp/>estimate<sp/>of<sp/>\~100<sp/>cycles<sp/>for<sp/>each<sp/>DMA<sp/>transaction<sp/>and</highlight></codeline>
<codeline><highlight class="normal">computation:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>3a.<sp/>“Latest<sp/>Waits”<sp/>pipeline:<sp/>full<sp/>description</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1<sp/><sp/><sp/><sp/>Import0<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Prolog<sp/>Stage<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">100<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">101<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Import1<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">102<sp/><sp/><sp/><sp/>WaitImport0<sp/><sp/>|<sp/>Prolog<sp/>Stage<sp/>2</highlight></codeline>
<codeline><highlight class="normal">103<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">104<sp/><sp/><sp/><sp/>Compute0<sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">200<sp/><sp/><sp/><sp/>Export0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">201<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Import2<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">202<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitImport1<sp/><sp/>|<sp/>Prolog<sp/>Stage<sp/>3</highlight></codeline>
<codeline><highlight class="normal">203<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">204<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute1<sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">300<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">301<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Import3<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">302<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitImport2<sp/><sp/>|<sp/>Steady<sp/>State</highlight></codeline>
<codeline><highlight class="normal">303<sp/><sp/><sp/><sp/>WaitExport0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">304<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute2<sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">400<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">401<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">402<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitImport3<sp/><sp/>|<sp/>Epilog<sp/>Stage<sp/>1</highlight></codeline>
<codeline><highlight class="normal">403<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitExport1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">404<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compute3<sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">500<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export3<sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">501<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">502<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Epilog<sp/>Stage<sp/>2</highlight></codeline>
<codeline><highlight class="normal">503<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitExport2<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">504<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">600<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">601<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">602<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Epilog<sp/>Stage<sp/>3</highlight></codeline>
<codeline><highlight class="normal">603<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitExport3<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">604<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight></codeline>
    </programlisting>
    <location file="v7F17Om_TTL/doc/tutorials/pipelining_dma_tiled_loops/pipelining_dma_tiled_loops.md"/>
  </compounddef>
</doxygen>
